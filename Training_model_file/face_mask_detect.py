# -*- coding: utf-8 -*-
"""face_mask_detect.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YNod_QcB1zGR-O5P4lNKVgEGMelCtfva
"""

!pip install patool

import os
import shutil

shutil.rmtree('mask1')

path = 'drive/My Drive/dataset'

import patoolib
patoolib.extract_archive(path+"/face.rar")

import patoolib
patoolib.extract_archive(path+"/face.rar")

os.makedirs('test')
os.makedirs('train')

os.makedirs('test/mask')
os.makedirs('test/face')

os.makedirs('train/mask')
os.makedirs('train/face')

k = 0
for i in os.listdir('mask'):
  src = 'mask/'+i
  dest = 'train/mask/'+i
  shutil.move(src,dest)
  k = k+1
print(k)

print(len(os.listdir('mask')))
print(len(os.listdir('face')))

print(len(os.listdir('train/mask')))
print(len(os.listdir('train/face')))

print(len(os.listdir('test/mask')))
print(len(os.listdir('test/face')))

shutil.rmtree('face')
shutil.rmtree('mask')

shutil.copytree('mask','train/mask')

os.remove('mask.rar')

from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D
from keras.layers import Dense, Activation, Dropout, Flatten
from keras import optimizers
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
import numpy as np

# step 1: load data

img_width = 150
img_height = 150
train_data_dir = 'train'
valid_data_dir = 'test'

datagen = ImageDataGenerator(rescale = 1./255,
                             rotation_range=60,
                              width_shift_range=0.1,
                              height_shift_range=0.1,
                              zoom_range=0.2
                             )

train_generator = datagen.flow_from_directory(directory=train_data_dir,
											   target_size=(img_width,img_height),
											   classes=['face','mask'],
											   class_mode='binary',
											   batch_size=16)

validation_generator = datagen.flow_from_directory(directory=valid_data_dir,
											   target_size=(img_width,img_height),
											   classes=['face','mask'],
											   class_mode='binary',
											   batch_size=32)

# step-2 : build model

model =Sequential()

model.add(Conv2D(32,(3,3), input_shape=(img_width, img_height, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(32,(3,3), input_shape=(img_width, img_height, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3), input_shape=(img_width, img_height, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',optimizer='rmsprop',metrics=['accuracy'])

print('model complied!!')

print('starting training....')
training = model.fit_generator(generator=train_generator, steps_per_epoch=2048 // 16,epochs=30,validation_data=validation_generator,validation_steps=832//16)

print('training finished!!')

##Prediction Part
import numpy as np
from keras.preprocessing import image

img_pred = image.load_img('mask.png', target_size = (150, 150))
img_pred = image.img_to_array(img_pred)
img_pred = np.expand_dims(img_pred, axis = 0)
rslt = model.predict(img_pred)

rslt

print('saving weights to simple_CNN.h5')

model.save_weights('model_weights.h5')

print('all weights saved successfully !!')
#models.load_weights('models/simple_CNN.h5')

model.save('my_model.h5')

from tensorflow.keras.models import load_model
mode = load_model('my_model.h5')

##Prediction Part
import numpy as np
from keras.preprocessing import image

img_pred = image.load_img('mask.png', target_size = (150, 150))
img_pred = image.img_to_array(img_pred)
img_pred = np.expand_dims(img_pred, axis = 0)
rslt = mode.predict(img_pred)

rslt

import tensorflow as tf

modell = tf.keras.models.load_model('my_model.h5')
converter = tf.lite.TFLiteConverter.from_keras_model(modell)
tflite_model = converter.convert()
open("converted_model.tflite", "wb").write(tflite_model)